# -*- coding: utf-8 -*-
"""csvtograph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f8mqUbmUelqOO4J1UqwHXLUdra4wjuuT
"""

import csv
import random
from datetime import datetime, timedelta

# Function to generate random date within a range
def random_date(start_date, end_date):
    time_between_dates = end_date - start_date
    days_between_dates = time_between_dates.days
    random_number_of_days = random.randrange(days_between_dates)
    random_date = start_date + timedelta(days=random_number_of_days)
    return random_date

# Generate 100 records of dummy data
required_fields = [
    "Record date",
    "Type of steel",
    "Quantity of steel rods produced",
    "Energy consumption during manufacturing",
    "Transportation distance for raw materials",
    "Emissions from raw material extraction",
    "Emissions from production process",
    "Emissions from transportation of finished products"
]

start_date = datetime(2023, 1, 1)
end_date = datetime(2023, 12, 31)

data = []

for _ in range(100):
    record_date = random_date(start_date, end_date).strftime('%Y-%m-%d')
    type_of_steel = random.choice(["A", "B", "C"])
    quantity_produced = random.randint(1000, 5000)
    energy_consumption = round(random.uniform(1000, 5000), 2)
    transportation_distance = round(random.uniform(10, 100), 2)
    emissions_extraction = round(random.uniform(1, 10), 2)
    emissions_production = round(random.uniform(5, 20), 2)
    emissions_transportation = round(random.uniform(2, 15), 2)

    row = [
        record_date,
        type_of_steel,
        quantity_produced,
        energy_consumption,
        transportation_distance,
        emissions_extraction,
        emissions_production,
        emissions_transportation
    ]

    data.append(row)

# Write data to CSV file
filename = 'dummy_data.csv'
with open(filename, 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(required_fields)  # Write header
    csvwriter.writerows(data)            # Write data rows

print(f"CSV file '{filename}' has been created with 100 records of dummy data.")

!pip install pandas
!pip install scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Step 1: Load and preprocess data
df = pd.read_csv('dummy_data.csv')

# Step 2: Feature engineering (example: calculate emission intensity)
df['EmissionIntensity'] = df['Emissions from production process'] / df['Quantity of steel rods produced']

# Step 3: Model training (example: linear regression)
X = df[['Energy consumption during manufacturing', 'Transportation distance for raw materials']]
y = df['Emissions from production process']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Model evaluation
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Step 5: Generate suggestions
# Example: Predict emissions reduction if energy consumption is reduced by 10%
energy_reduction = 0.1
new_energy_consumption = X_test['Energy consumption during manufacturing'] * (1 - energy_reduction)

# Ensure X_test only includes columns used during training
X_test_adjusted = X_test.copy()
X_test_adjusted['Energy consumption during manufacturing'] = new_energy_consumption

predicted_emissions = model.predict(X_test_adjusted)
emissions_reduction = y_pred - predicted_emissions
print(f'Predicted emissions reduction: {emissions_reduction}')

# Step 6: Example of how to get a prediction for a single observation
# Example: Predict emissions reduction for a new observation
new_observation = {
    'Energy consumption during manufacturing': 3500,
    'Transportation distance for raw materials': 50
}

new_observation_df = pd.DataFrame([new_observation])
predicted_emissions_new = model.predict(new_observation_df[['Energy consumption during manufacturing', 'Transportation distance for raw materials']])
print(f'Predicted emissions for new observation: {predicted_emissions_new[0]}')

pip install streamlit

import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Read the CSV file into a pandas DataFrame
df = pd.read_csv('data.csv')

# Step 2: Extract x and y values from the DataFrame
days = df['Date']
values = df['Predicted Carbon Emission']

# Step 3: Plot the data
plt.figure(figsize=(10, 6))  # Optional: Adjust figure size

plt.plot(days, values, marker='o', linestyle='-')

# Step 4: Customize the plot (optional)
plt.title('Days vs Value')
plt.xlabel('Days')
plt.ylabel('Value')
plt.grid(True)

# Step 5: Show the plot
plt.show()